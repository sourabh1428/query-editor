name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Test and Build Job
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests (if any)
      run: npm test --if-present

    - name: Build frontend
      run: npm run build

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Test backend
      run: |
        cd backend
        pip install -r requirements.txt
        # Add backend tests here when available
        python -c "import app; print('Backend imports successfully')"

  # Deploy Job (only on main branch)
  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.pem
        chmod 600 ~/.ssh/ec2.pem
        echo "Host ec2
          HostName ${{ secrets.EC2_HOST }}
          User ec2-user
          IdentityFile ~/.ssh/ec2.pem
          StrictHostKeyChecking no" > ~/.ssh/config

    - name: Create deployment script
      run: |
        cat > deploy-remote.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "üöÄ Starting GitHub Actions Deployment"
        echo "======================================"

        # Colors for output
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        RED='\033[0;31m'
        NC='\033[0m'

        print_status() { echo -e "${GREEN}‚úÖ $1${NC}"; }
        print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
        print_error() { echo -e "${RED}‚ùå $1${NC}"; }

        # Navigate to application directory
        cd /home/ec2-user/query-editor || {
            print_error "Application directory not found. Running initial setup..."
            cd /home/ec2-user
            git clone https://github.com/sourabh1428/query-editor.git
            cd query-editor
        }

        # Pull latest changes
        print_status "Pulling latest changes from GitHub..."
        git fetch origin
        git reset --hard origin/main

        # Check if Docker is running
        if ! docker info >/dev/null 2>&1; then
            print_error "Docker is not running. Starting Docker..."
            sudo systemctl start docker
            sleep 5
        fi

        # Generate production environment if it doesn't exist
        if [ ! -f .env.production ]; then
            print_status "Creating production environment file..."
            
            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            DB_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
            JWT_SECRET=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)
            
            cat > .env.production << EOL
        # Database Configuration
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=${DB_PASSWORD}
        POSTGRES_DB=sqlanalytics

        # Backend Configuration  
        JWT_SECRET=${JWT_SECRET}
        FLASK_ENV=production
        DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/sqlanalytics

        # Frontend Configuration
        VITE_API_URL=http://${PUBLIC_IP}:5000
        NODE_ENV=production

        # CORS Configuration
        FRONTEND_URL=http://${PUBLIC_IP}:3000
        EOL
        fi

        # Create production docker-compose if it doesn't exist
        if [ ! -f docker-compose.production.yml ]; then
            print_status "Creating production docker-compose configuration..."
            
            source .env.production
            
            cat > docker-compose.production.yml << EOL
        version: '3.8'

        services:
          db:
            restart: unless-stopped
            environment:
              POSTGRES_USER: postgres
              POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
              POSTGRES_DB: sqlanalytics
            volumes:
              - postgres_data:/var/lib/postgresql/data
              
          backend:
            restart: unless-stopped
            environment:
              DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/sqlanalytics
              JWT_SECRET: ${JWT_SECRET}
              FLASK_ENV: production
              PORT: 5000
              FRONTEND_URL: ${FRONTEND_URL}
            depends_on:
              - db
              
          frontend:
            restart: unless-stopped
            environment:
              VITE_API_URL: ${VITE_API_URL}
              NODE_ENV: production
            depends_on:
              - backend

        volumes:
          postgres_data:
            external: false
        EOL
        fi

        # Stop existing containers
        print_status "Stopping existing containers..."
        docker-compose down || true

        # Remove old images to force rebuild
        print_status "Cleaning up old images..."
        docker-compose -f docker-compose.yml -f docker-compose.production.yml pull || true
        docker system prune -f || true

        # Build and start containers
        print_status "Building and starting containers..."
        docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d --build

        # Wait for services to be ready
        print_status "Waiting for services to be ready..."
        
        # Wait for backend
        for i in {1..30}; do
            if curl -s http://localhost:5000/api/health >/dev/null 2>&1; then
                print_status "Backend is ready"
                break
            fi
            echo "Waiting for backend... attempt $i/30"
            sleep 10
        done

        # Wait for frontend  
        for i in {1..20}; do
            if curl -s http://localhost:3000/health >/dev/null 2>&1; then
                print_status "Frontend is ready"
                break
            fi
            echo "Waiting for frontend... attempt $i/20"
            sleep 5
        done

        # Show status
        print_status "Deployment completed!"
        echo ""
        echo "üìä Service Status:"
        docker-compose ps
        
        echo ""
        echo "üì± Application URLs:"
        PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
        echo "Frontend: http://${PUBLIC_IP}:3000"
        echo "Backend API: http://${PUBLIC_IP}:5000"
        echo "API Health: http://${PUBLIC_IP}:5000/api/health"
        echo "API Docs: http://${PUBLIC_IP}:5000/api-docs/"
        
        print_status "GitHub Actions deployment completed successfully! üéâ"
        EOF

        chmod +x deploy-remote.sh

    - name: Deploy to EC2
      run: |
        echo "üöÄ Deploying to EC2: ${{ secrets.EC2_HOST }}"
        
        # Copy deployment script to EC2
        scp -i ~/.ssh/ec2.pem deploy-remote.sh ec2-user@${{ secrets.EC2_HOST }}:~/
        
        # Execute deployment on EC2
        ssh -i ~/.ssh/ec2.pem ec2-user@${{ secrets.EC2_HOST }} 'bash ~/deploy-remote.sh'

    - name: Health Check
      run: |
        echo "üîç Performing health check..."
        
        # Wait a bit for services to stabilize
        sleep 30
        
        # Check backend health
        if curl -f http://${{ secrets.EC2_HOST }}:5000/api/health; then
          echo "‚úÖ Backend health check passed"
        else
          echo "‚ùå Backend health check failed"
          exit 1
        fi
        
        # Check frontend health
        if curl -f http://${{ secrets.EC2_HOST }}:3000/health; then
          echo "‚úÖ Frontend health check passed"
        else
          echo "‚ö†Ô∏è Frontend health check failed (this might be normal)"
        fi

    - name: Send deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment successful!"
          echo "Frontend: http://${{ secrets.EC2_HOST }}:3000"
          echo "Backend: http://${{ secrets.EC2_HOST }}:5000"
        else
          echo "‚ùå Deployment failed!"
        fi

  # Notify Job (runs on both success and failure)
  notify:
    needs: [test-and-build, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment to AWS EC2 completed successfully!"
          echo "üåê Your application is live at:"
          echo "   Frontend: http://${{ secrets.EC2_HOST }}:3000"
          echo "   Backend API: http://${{ secrets.EC2_HOST }}:5000"
          echo "   API Docs: http://${{ secrets.EC2_HOST }}:5000/api-docs/"
        else
          echo "‚ùå Deployment failed. Check the logs above for details."
          exit 1
        fi 